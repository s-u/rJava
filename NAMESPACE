exportPattern("^\\.j")
export( "J" )
export( "%instanceof%" )

export( clone )
S3method( clone, default ) 
export(is.jnull, .r2j, .rJava.base.path, toJava)
exportClasses(jobjRef, jarrayRef, jrectRef, jfloat, jlong, jbyte, jchar, jclassName)
exportMethods(show, "$", "$<-", 
	"==", "!=", "<", ">", "<=", ">=", 
	names, new, as.character, length, head, tail, 
	"[", "[[", "[[<-", str, "dim<-", 
	unique, duplicated, anyDuplicated, 
	sort, rev, 
	min, max, range, 
	rep, 
	clone )
import(methods)
importFrom(utils,head)
importFrom(utils,tail)
importFrom(utils,str)
importFrom(utils, assignInNamespace)

S3method(with, jobjRef)
S3method(with, jarrayRef)
S3method(with, jclassName)

S3method(within, jobjRef)
S3method(within, jarrayRef)
S3method(within, jclassName)

# within requires that with.jobjRef is visible outside
export(with.jobjRef)

if( exists( ".DollarNames", asNamespace("utils") ) ) importFrom( utils, .DollarNames )
S3method(.DollarNames, jobjRef)
S3method(.DollarNames, jarrayRef)
S3method(.DollarNames, jrectRef)
S3method(.DollarNames, jclassName)

S3method( as.list, jobjRef )
S3method( as.list, jarrayRef )
S3method( as.list, jrectRef )

S3method( "$", "Throwable" )
S3method( "$<-", "Throwable" )

export( javaImport )

